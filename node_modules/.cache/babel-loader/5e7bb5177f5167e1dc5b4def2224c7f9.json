{"ast":null,"code":"var _jsxFileName = \"/Users/kc/Thinkful/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/FocusTime.js\";\nimport React from \"react\";\n\nfunction FocusTime({\n  session,\n  focusDuration,\n  breakDuration,\n  aria,\n  isTimerRunning\n}) {\n  if (session === null) return null;\n\n  function MinutestoSeconds(seconds) {\n    return (seconds - (seconds %= 60)) / 60 + (9 < seconds ? \":\" : \":0\") + seconds;\n  }\n\n  const progress = () => {\n    if ((session === null || session === void 0 ? void 0 : session.label) === \"Focusing\") {\n      return (focusDuration * 60 - (session === null || session === void 0 ? void 0 : session.timeRemaining)) / (focusDuration * 0.6);\n    }\n\n    return (breakDuration * 60 - (session === null || session === void 0 ? void 0 : session.timeRemaining)) / (breakDuration * 0.6);\n  };\n\n  const progressNum = progress();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, session && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    \"data-testid\": \"session-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, session && session.label, \" for\", \" \", (\"0\" + (session.label.toLowerCase().indexOf(\"ocus\") > 0 ? focusDuration : breakDuration)).substr(-2), \":00 minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"lead\",\n    \"data-testid\": \"session-sub-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, session && MinutestoSeconds(session.timeRemaining), \" remaining\"), !isTimerRunning && /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 33\n    }\n  }, \"PAUSED\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    style: {\n      height: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": aria // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${aria}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }\n  })))));\n}\n\nexport default FocusTime;","map":{"version":3,"sources":["/Users/kc/Thinkful/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/FocusTime.js"],"names":["React","FocusTime","session","focusDuration","breakDuration","aria","isTimerRunning","MinutestoSeconds","seconds","progress","label","timeRemaining","progressNum","toLowerCase","indexOf","substr","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,SAASC,SAAT,CAAmB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,aAAX;AAA0BC,EAAAA,aAA1B;AAAyCC,EAAAA,IAAzC;AAA8CC,EAAAA;AAA9C,CAAnB,EAAmF;AACjF,MAAIJ,OAAO,KAAK,IAAhB,EAAsB,OAAO,IAAP;;AAEtB,WAASK,gBAAT,CAA0BC,OAA1B,EAAmC;AACjC,WAAO,CAACA,OAAO,IAAIA,OAAO,IAAI,EAAf,CAAR,IAA8B,EAA9B,IAAoC,IAAIA,OAAJ,GAAa,GAAb,GAAmB,IAAvD,IAA+DA,OAAtE;AACD;;AAGD,QAAMC,QAAQ,GAAG,MAAM;AACrB,QAAI,CAAAP,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEQ,KAAT,MAAmB,UAAvB,EAAmC;AACjC,aACE,CAACP,aAAa,GAAG,EAAhB,IAAqBD,OAArB,aAAqBA,OAArB,uBAAqBA,OAAO,CAAES,aAA9B,CAAD,KAAiDR,aAAa,GAAG,GAAjE,CADF;AAGD;;AACD,WACE,CAACC,aAAa,GAAG,EAAhB,IAAqBF,OAArB,aAAqBA,OAArB,uBAAqBA,OAAO,CAAES,aAA9B,CAAD,KAAiDP,aAAa,GAAG,GAAjE,CADF;AAGD,GATD;;AAWA,QAAMQ,WAAW,GAAGH,QAAQ,EAA5B;AACA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGP,OAAO,iBACN;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAI,mBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGA,OAAO,IAAIA,OAAO,CAACQ,KAFtB,UAEiC,GAFjC,EAGK,CACC,OACCR,OAAO,CAACQ,KAAR,CAAcG,WAAd,GAA4BC,OAA5B,CAAoC,MAApC,IAA8C,CAA9C,GACGX,aADH,GAEGC,aAHJ,CADD,EAKCW,MALD,CAKQ,CAAC,CALT,CAHL,gBAFF,eAcE;AAAG,IAAA,SAAS,EAAC,MAAb;AAAoB,mBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGb,OAAO,IAAIK,gBAAgB,CACzCL,OAAO,CAACS,aADiC,CAH9B,eAdF,EAoBG,CAACL,cAAD,iBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cApBtB,CADF,CAHJ,eA4BI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,KAAK,EAAE;AAAEU,MAAAA,MAAM,EAAE;AAAV,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAgBX,IALlB,CAKuB;AALvB;AAME,IAAA,KAAK,EAAE;AAAEY,MAAAA,KAAK,EAAG,GAAEZ,IAAK;AAAjB,KANT,CAM+B;AAN/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CA5BJ,CADF;AA6CD;;AAED,eAAeJ,SAAf","sourcesContent":["import React from \"react\";\n\n\nfunction FocusTime({ session, focusDuration, breakDuration, aria,isTimerRunning }) {\n  if (session === null) return null;\n\n  function MinutestoSeconds(seconds) {\n    return (seconds - (seconds %= 60)) / 60 + (9 < seconds? \":\" : \":0\") + seconds;\n  }\n  \n\n  const progress = () => {\n    if (session?.label === \"Focusing\") {\n      return (\n        (focusDuration * 60 - session?.timeRemaining) / (focusDuration * 0.6)\n      );\n    }\n    return (\n      (breakDuration * 60 - session?.timeRemaining) / (breakDuration * 0.6)\n    );\n  };\n\n  const progressNum = progress();\n  return (\n    <div>\n      {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n      {session && (\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n            <h2 data-testid=\"session-title\">\n              {/* {session ? ` Focusing for ${focusDuration}:00 minutes`: \"\" } */}\n              {session && session.label} for{\" \"}\n                {(\n                  \"0\" +\n                  (session.label.toLowerCase().indexOf(\"ocus\") > 0\n                    ? focusDuration\n                    : breakDuration)\n                ).substr(-2)}\n                :00 minutes\n            </h2>\n            {/* TODO: Update message below correctly format the time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {/*{session?.timeRemaining} remaining */}\n              \n              {session && MinutestoSeconds \n(session.timeRemaining)} remaining\n            </p>\n            {!isTimerRunning && <h2>PAUSED</h2>}\n          </div> \n        </div>\n        )}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow= {aria}// TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: `${aria}%` }}// TODO: Increase width % as elapsed time increases\n              />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default FocusTime;"]},"metadata":{},"sourceType":"module"}