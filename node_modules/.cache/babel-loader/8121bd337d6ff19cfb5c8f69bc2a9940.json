{"ast":null,"code":"var _jsxFileName = \"/Users/kc/Thinkful/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport ProgressBar from \"./ProgressBar\";\nimport Controls from \"./Controls\";\nimport BreakTime from \"./BreakTime\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null); // ToDo: Allow the user to adjust the focus and break duration.\n\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [toLeft, setToLeft] = useState(0);\n  const [aria, setAria] = useState(0);\n\n  const focusIncrement = increase => {\n    if (increase && focusDuration < 60) {\n      setFocusDuration(focusDuration + 5);\n    } else if (!increase && focusDuration > 5) {\n      setFocusDuration(focusDuration - 5);\n    }\n  };\n\n  const breakIncrement = increase => {\n    if (increase && breakDuration < 15) {\n      setBreakDuration(breakDuration + 1);\n    } else if (!increase && breakDuration > 1) {\n      setBreakDuration(breakDuration - 1);\n    }\n  };\n\n  const handleStop = () => {\n    setSession(null);\n    setIsTimerRunning(false);\n  };\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n\n  useInterval(() => {\n    setToLeft(toLeft + 1);\n\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    setSession(nextTick);\n    const left = session.timeRemaining;\n\n    if (session.label === \"Focusing\") {\n      setAria(100 * (focusDuration * 60 - left) / (focusDuration * 60));\n    } else {\n      setAria(100 * (breakDuration * 60 - left) / (breakDuration * 60));\n    }\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  const noSession = () => {\n    if (session === null) return true;\n    return false;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BreakTime, {\n    focusIncrement: focusIncrement,\n    breakIncrement: breakIncrement,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    isTimerRunning: isTimerRunning,\n    noSession: noSession,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Controls, {\n    playPause: playPause,\n    stopSession: handleStop //noSession={noSession}\n    ,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ProgressBar, {\n    session: session,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    aria: aria,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/kc/Thinkful/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","ProgressBar","Controls","BreakTime","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","toLeft","setToLeft","aria","setAria","focusIncrement","increase","breakIncrement","handleStop","Audio","play","left","playPause","nextState","prevStateSession","noSession"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport ProgressBar from \"./ProgressBar\";\nimport Controls from \"./Controls\";\nimport BreakTime from \"./BreakTime\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [toLeft, setToLeft]= useState(0)\n  const [aria, setAria] = useState(0);\n\n  const focusIncrement = (increase) => {\n    if (increase && focusDuration < 60) {\n      setFocusDuration(focusDuration + 5);\n    } else if (!increase && focusDuration > 5) {\n      setFocusDuration(focusDuration - 5);\n    }\n  };\n\n  const breakIncrement = (increase) => {\n    if (increase && breakDuration < 15) {\n      setBreakDuration(breakDuration + 1);\n    } else if (!increase && breakDuration > 1) {\n      setBreakDuration(breakDuration - 1);\n    }\n  };\n\n  const handleStop = () => { \n    setSession(null);\n  setIsTimerRunning(false)\n}\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n   useInterval(() => {\n    setToLeft(toLeft + 1);\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        setSession(nextSession(focusDuration, breakDuration));\n      }\n  setSession(nextTick);\n      const left = session.timeRemaining;\n      if (session.label === \"Focusing\") {\n        setAria((100 * (focusDuration * 60 - left)) / (focusDuration * 60));\n      } else {\n        setAria((100 * (breakDuration * 60 - left)) / (breakDuration * 60));\n      }\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  const noSession = () => {\n    if (session === null) return true;\n    return false;\n  };\n\n  return (\n    <div className=\"pomodoro\">\n      <BreakTime\n        focusIncrement={focusIncrement}\n        breakIncrement={breakIncrement}\n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n        isTimerRunning={isTimerRunning}\n        noSession={noSession}\n      />\n      <Controls\n        playPause={playPause}\n        stopSession={handleStop}\n        //noSession={noSession}\n        isTimerRunning={isTimerRunning}\n      />\n      <ProgressBar\n        session={session}\n        focusDuration={focusDuration}\n        breakDuration={breakDuration}\n        aria= {aria}\n      />\n    </div>\n  );\n}\n\nexport default Pomodoro;"]},"metadata":{},"sourceType":"module"}